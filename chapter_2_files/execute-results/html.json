{
  "hash": "e7fe6d40985237a8f9e72fc6d27ae73f",
  "result": {
    "markdown": "# *ggplot2* plotting in R\n\n- Necessary packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, colorspace, corrr, cowplot, ggdark, ggforce, ggrepel, ggridges, ggsci, ggtext, ggthemes, grid, gridExtra, patchwork, rcartocolor, scico, showtext, shiny, echarts4r, ggiraph, highcharter, plotly\n              )\n```\n:::\n\n\n- Necessary packages which is not available in CRAN\n\n- The Dataset\n\nWe are using data from the National Morbidity and Mortality Air Pollution Study (NMMAPS). To make the plots manageable we are limiting the data to Chicago and 1997–2000\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchic <- readr::read_csv(\"https://raw.githubusercontent.com/z3tt/ggplot-courses/main/data/chicago-nmmaps-custom.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 1461 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (3): city, season, month\ndbl  (7): temp, o3, dewpoint, pm10, yday, month_numeric, year\ndate (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble::glimpse(chic)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 1,461\nColumns: 11\n$ city          <chr> \"chic\", \"chic\", \"chic\", \"chic\", \"chic\", \"chic\", \"chic\", …\n$ date          <date> 1997-01-01, 1997-01-02, 1997-01-03, 1997-01-04, 1997-01…\n$ temp          <dbl> 36.0, 45.0, 40.0, 51.5, 27.0, 17.0, 16.0, 19.0, 26.0, 16…\n$ o3            <dbl> 5.659256, 5.525417, 6.288548, 7.537758, 20.760798, 14.94…\n$ dewpoint      <dbl> 37.500, 47.250, 38.000, 45.500, 11.250, 5.750, 7.000, 17…\n$ pm10          <dbl> 13.052268, 41.948600, 27.041751, 25.072573, 15.343121, 9…\n$ season        <chr> \"Winter\", \"Winter\", \"Winter\", \"Winter\", \"Winter\", \"Winte…\n$ yday          <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 1…\n$ month         <chr> \"Jan\", \"Jan\", \"Jan\", \"Jan\", \"Jan\", \"Jan\", \"Jan\", \"Jan\", …\n$ month_numeric <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ year          <dbl> 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 19…\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(chic, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 11\n   city  date        temp    o3 dewpoint  pm10 season  yday month month_numeric\n   <chr> <date>     <dbl> <dbl>    <dbl> <dbl> <chr>  <dbl> <chr>         <dbl>\n 1 chic  1997-01-01  36    5.66    37.5  13.1  Winter     1 Jan               1\n 2 chic  1997-01-02  45    5.53    47.2  41.9  Winter     2 Jan               1\n 3 chic  1997-01-03  40    6.29    38    27.0  Winter     3 Jan               1\n 4 chic  1997-01-04  51.5  7.54    45.5  25.1  Winter     4 Jan               1\n 5 chic  1997-01-05  27   20.8     11.2  15.3  Winter     5 Jan               1\n 6 chic  1997-01-06  17   14.9      5.75  9.36 Winter     6 Jan               1\n 7 chic  1997-01-07  16   11.9      7    20.2  Winter     7 Jan               1\n 8 chic  1997-01-08  19    8.68    17.8  33.1  Winter     8 Jan               1\n 9 chic  1997-01-09  26   13.4     24    12.1  Winter     9 Jan               1\n10 chic  1997-01-10  16   10.4      5.38 24.8  Winter    10 Jan               1\n# ℹ 1 more variable: year <dbl>\n```\n:::\n:::\n\n\n- The `ggplot2` Package\n\n> `ggplot2` is a system for declaratively creating graphics, based on The Grammar of Graphics. You provide the data, tell `ggplot2` how to map variables to aesthetics, what graphical primitives to use, and it takes care of the details.\n\nA ggplot is built up from a few basic elements:\n\n- Data: The raw data that you want to plot.\n- Geometries geom_: The geometric shapes that will represent the data.\n- Aesthetics aes(): Aesthetics of the geometric and statistical objects, such as position, color, size, shape, and transparency\n- Scales scale_: Maps between the data and the aesthetic dimensions, such as data range to plot width or factor values to colors.\n- Statistical transformations stat_: Statistical summaries of the data, such as quantiles, fitted curves, and sums.\n- Coordinate system coord_: The transformation used for mapping data coordinates into the plane of the data rectangle.\n- Facets facet_: The arrangement of the data into a grid of plots.\n- Visual themes theme(): The overall visual defaults of a plot, such as background, grids, axes, default typeface, sizes and colors.\n\n\n## A Default ggplot:\n\n- We always start to define a plotting object by calling ggplot(data = df)\n\n- In most cases, you might want to plot two variables—one on the x and one on the y axis. These are positional aesthetics and thus we add aes(x = var1, y = var2) to the ggplot() \n\n- We specify the data outside aes() and add the variables that ggplot maps the aesthetics to inside aes()\n\nHere, we map the variable date to the x position and the variable temp to the y position. Later, we will also map variables to all kind of other aesthetics such as color, size, and shape.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(g <- ggplot(chic, aes(x = date, y = temp)))\n```\n\n::: {.cell-output-display}\n![](chapter_2_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ng + geom_point()\n```\n\n::: {.cell-output-display}\n![](chapter_2_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nThis data could be also visualized as a line plot (not optimal, but people do things like this all the time). So we simply add geom_line():\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng + geom_line()\n```\n\n::: {.cell-output-display}\n![](chapter_2_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nOne can also combine several geometric layers—and this is where the magic and fun starts!\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng + geom_line() + geom_point()\n```\n\n::: {.cell-output-display}\n![](chapter_2_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nChange Properties of Geometries\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng + geom_point(color = \"firebrick\", shape = \"diamond\", size = 2)\n```\n\n::: {.cell-output-display}\n![](chapter_2_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ng + geom_point(color = \"firebrick\", shape = \"diamond\", size = 2) +\n    geom_line(color = \"firebrick\", linetype = \"dotted\", lwd = .3)\n```\n\n::: {.cell-output-display}\n![](chapter_2_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n- Replace the default ggplot2 theme\n\nTo illustrate some more of ggplot’s versatility, let’s get rid of the grayish default `ggplot2` look by setting a different built-in theme, e.g. theme_bw() by calling `theme_set()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntheme_set(theme_bw())\ng + geom_point(color = \"firebrick\")\n```\n\n::: {.cell-output-display}\n![](chapter_2_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n## Working with Axes\n\n- Change Axis Titles:\n\nLet’s add some well-written labels to the axes. For this, we add labs() providing a character string for each label we want to change (here x and y):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(chic, aes(x = date, y = temp)) +\n  geom_point(color = \"firebrick\") +\n  labs(x = \"Year\", y = \"Temperature (°F)\")\n```\n\n::: {.cell-output-display}\n![](chapter_2_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n- Increase Space between Axis and Axis Titles\n\nWe are going to use them a lot! For now, we are going to modify text elements. We can change the properties of all or particular text elements (here axis titles) by overwriting the default element_text() within the theme() call:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(chic, aes(x = date, y = temp)) +\n  geom_point(color = \"firebrick\") +\n  labs(x = \"Year\", y = \"Temperature (°F)\") +\n  theme(axis.title.x = element_text(vjust = 0, size = 15),\n        axis.title.y = element_text(vjust = 0, size = 15))\n```\n\n::: {.cell-output-display}\n![](chapter_2_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\nThe labels t and r within the margin() object refer to top and right, respectively. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(chic, aes(x = date, y = temp)) +\n  geom_point(color = \"firebrick\") +\n  labs(x = \"Year\", y = \"Temperature (°F)\") +\n  theme(axis.title.x = element_text(margin = margin(t = 10), size = 15),\n        axis.title.y = element_text(margin = margin(r = 10), size = 15))\n```\n\n::: {.cell-output-display}\n![](chapter_2_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n## Limit Axis Range\n\nSometimes you want to zoom into take a closer look at some range of your data. You can do this without sub-setting your data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(chic, aes(x = date, y = temp)) +\n  geom_point(color = \"firebrick\") +\n  labs(x = \"Year\", y = \"Temperature (°F)\") +\n  ylim(c(0, 50))\n```\n\n::: {.cell-output-display}\n![](chapter_2_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n- Alternatively you can use scale_y_continuous(limits = c(0, 50))\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(chic, aes(x = date, y = temp)) +\n  geom_point(color = \"firebrick\") +\n  labs(x = \"Year\", y = \"Temperature (°F)\") +\n  scale_y_continuous(limits = c(0, 50))\n```\n\n::: {.cell-output-display}\n![](chapter_2_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n- or coord_cartesian(ylim = c(0, 50)). \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(chic, aes(x = date, y = temp)) +\n  geom_point(color = \"firebrick\") +\n  labs(x = \"Year\", y = \"Temperature (°F)\") +\n  coord_cartesian(ylim = c(0, 50))\n```\n\n::: {.cell-output-display}\n![](chapter_2_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n### Force Plot to Start at Origin\n\nRelated to that, you can force R to plot the graph starting at the origin:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nchic_high <- dplyr::filter(chic, temp > 25, o3 > 20)\n\nggplot(chic_high, aes(x = temp, y = o3)) +\n  geom_point(color = \"darkblue\") +\n  labs(x = \"Temperature higher than 25°F\",\n       y = \"Ozone higher than 20 ppb\") +\n  expand_limits(x = 0, y = 0)\n```\n\n::: {.cell-output-display}\n![](chapter_2_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "chapter_2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}