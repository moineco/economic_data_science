# *ggplot2* plotting in R

- Necessary packages

```{r}
pacman::p_load(tidyverse,
               colorspace,
               corrr,
               cowplot,
               ggdark,
               ggforce,
               ggrepel,
               ggridges,
               ggsci,
               ggtext,
               ggthemes,
               grid,
               gridExtra,
               patchwork,
               rcartocolor,
               scico,
               showtext,
               shiny,
               echarts4r,
               ggiraph,
               highcharter,
               plotly
              )
```

- Necessary packages which is not available in CRAN

- The Dataset

We are using data from the National Morbidity and Mortality Air Pollution Study (NMMAPS). To make the plots manageable we are limiting the data to Chicago and 1997–2000

```{r}
chic <- readr::read_csv("https://raw.githubusercontent.com/z3tt/ggplot-courses/main/data/chicago-nmmaps-custom.csv")
```

```{r}
tibble::glimpse(chic)
```

```{r}
head(chic, 10)
```

- The `ggplot2` Package

> `ggplot2` is a system for declaratively creating graphics, based on The Grammar of Graphics. You provide the data, tell `ggplot2` how to map variables to aesthetics, what graphical primitives to use, and it takes care of the details.

A ggplot is built up from a few basic elements:

- Data: The raw data that you want to plot.
- Geometries geom_: The geometric shapes that will represent the data.
- Aesthetics aes(): Aesthetics of the geometric and statistical objects, such as position, color, size, shape, and transparency
- Scales scale_: Maps between the data and the aesthetic dimensions, such as data range to plot width or factor values to colors.
- Statistical transformations stat_: Statistical summaries of the data, such as quantiles, fitted curves, and sums.
- Coordinate system coord_: The transformation used for mapping data coordinates into the plane of the data rectangle.
- Facets facet_: The arrangement of the data into a grid of plots.
- Visual themes theme(): The overall visual defaults of a plot, such as background, grids, axes, default typeface, sizes and colors.


## A Default ggplot:

- We always start to define a plotting object by calling ggplot(data = df)

- In most cases, you might want to plot two variables—one on the x and one on the y axis. These are positional aesthetics and thus we add aes(x = var1, y = var2) to the ggplot() 

- We specify the data outside aes() and add the variables that ggplot maps the aesthetics to inside aes()

Here, we map the variable date to the x position and the variable temp to the y position. Later, we will also map variables to all kind of other aesthetics such as color, size, and shape.

```{r}
(g <- ggplot(chic, aes(x = date, y = temp)))
```

```{r}
g + geom_point()
```

This data could be also visualized as a line plot (not optimal, but people do things like this all the time). So we simply add geom_line():

```{r}
g + geom_line()
```

One can also combine several geometric layers—and this is where the magic and fun starts!

```{r}
g + geom_line() + geom_point()
```




