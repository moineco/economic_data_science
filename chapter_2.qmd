# *ggplot2* plotting in R

-   Necessary packages

```{r}
pacman::p_load(tidyverse, colorspace, corrr, cowplot, ggdark, ggforce, ggrepel, ggridges, ggsci, ggtext, ggthemes, grid, gridExtra, patchwork, rcartocolor, scico, showtext, shiny, echarts4r, ggiraph, highcharter, plotly
              )
```

-   Necessary packages which is not available in CRAN

-   The Dataset

We are using data from the National Morbidity and Mortality Air Pollution Study (NMMAPS). To make the plots manageable we are limiting the data to Chicago and 1997–2000

```{r}
#chic <- readr::read_csv("https://raw.githubusercontent.com/z3tt/ggplot-courses/main/data/chicago-nmmaps-custom.csv")
```

```{r}
#tibble::glimpse(chic)
```

```{r}
#head(chic, 10)
```

-   The `ggplot2` Package

> `ggplot2` is a system for declaratively creating graphics, based on The Grammar of Graphics. You provide the data, tell `ggplot2` how to map variables to aesthetics, what graphical primitives to use, and it takes care of the details.

A ggplot is built up from a few basic elements:

-   Data: The raw data that you want to plot.
-   Geometries geom\_: The geometric shapes that will represent the data.
-   Aesthetics aes(): Aesthetics of the geometric and statistical objects, such as position, color, size, shape, and transparency
-   Scales scale\_: Maps between the data and the aesthetic dimensions, such as data range to plot width or factor values to colors.
-   Statistical transformations stat\_: Statistical summaries of the data, such as quantiles, fitted curves, and sums.
-   Coordinate system coord\_: The transformation used for mapping data coordinates into the plane of the data rectangle.
-   Facets facet\_: The arrangement of the data into a grid of plots.
-   Visual themes theme(): The overall visual defaults of a plot, such as background, grids, axes, default typeface, sizes and colors.

## A Default ggplot:

-   We always start to define a plotting object by calling ggplot(data = df)

-   In most cases, you might want to plot two variables—one on the x and one on the y axis. These are positional aesthetics and thus we add aes(x = var1, y = var2) to the ggplot()

-   We specify the data outside aes() and add the variables that ggplot maps the aesthetics to inside aes()

Here, we map the variable date to the x position and the variable temp to the y position. Later, we will also map variables to all kind of other aesthetics such as color, size, and shape.

```{r}
(g <- ggplot(chic, aes(x = date, y = temp)))
```

```{r}
g + geom_point()
```

This data could be also visualized as a line plot (not optimal, but people do things like this all the time). So we simply add geom_line():

```{r}
g + geom_line()
```

One can also combine several geometric layers—and this is where the magic and fun starts!

```{r}
g + geom_line() + geom_point()
```

Change Properties of Geometries

```{r}
g + geom_point(color = "firebrick", shape = "diamond", size = 2)
```

```{r}
g + geom_point(color = "firebrick", shape = "diamond", size = 2) +
    geom_line(color = "firebrick", linetype = "dotted", lwd = .3)
```

-   Replace the default ggplot2 theme

To illustrate some more of ggplot’s versatility, let’s get rid of the grayish default `ggplot2` look by setting a different built-in theme, e.g. theme_bw() by calling `theme_set()`

```{r}
theme_set(theme_bw())
g + geom_point(color = "firebrick")
```

## Working with Axes

-   Change Axis Titles:

Let’s add some well-written labels to the axes. For this, we add labs() providing a character string for each label we want to change (here x and y):

```{r}
ggplot(chic, aes(x = date, y = temp)) +
  geom_point(color = "firebrick") +
  labs(x = "Year", y = "Temperature (°F)")
```

-   Increase Space between Axis and Axis Titles

We are going to use them a lot! For now, we are going to modify text elements. We can change the properties of all or particular text elements (here axis titles) by overwriting the default element_text() within the theme() call:

```{r}
ggplot(chic, aes(x = date, y = temp)) +
  geom_point(color = "firebrick") +
  labs(x = "Year", y = "Temperature (°F)") +
  theme(axis.title.x = element_text(vjust = 0, size = 15),
        axis.title.y = element_text(vjust = 0, size = 15))
```

The labels t and r within the margin() object refer to top and right, respectively.

```{r}
ggplot(chic, aes(x = date, y = temp)) +
  geom_point(color = "firebrick") +
  labs(x = "Year", y = "Temperature (°F)") +
  theme(axis.title.x = element_text(margin = margin(t = 10), size = 15),
        axis.title.y = element_text(margin = margin(r = 10), size = 15))
```

## Limit Axis Range

Sometimes you want to zoom into take a closer look at some range of your data. You can do this without sub-setting your data:

```{r}
#| warning: false
ggplot(chic, aes(x = date, y = temp)) +
  geom_point(color = "firebrick") +
  labs(x = "Year", y = "Temperature (°F)") +
  ylim(c(0, 50))
```

-   Alternatively you can use scale_y_continuous(limits = c(0, 50))

```{r}
#| warning: false
ggplot(chic, aes(x = date, y = temp)) +
  geom_point(color = "firebrick") +
  labs(x = "Year", y = "Temperature (°F)") +
  scale_y_continuous(limits = c(0, 50))
```

-   or coord_cartesian(ylim = c(0, 50)).

```{r}
#| warning: false
ggplot(chic, aes(x = date, y = temp)) +
  geom_point(color = "firebrick") +
  labs(x = "Year", y = "Temperature (°F)") +
  coord_cartesian(ylim = c(0, 50))
```

### Force Plot to Start at Origin

Related to that, you can force R to plot the graph starting at the origin:

```{r}
library(tidyverse)

chic_high <- dplyr::filter(chic, temp > 25, o3 > 20)

ggplot(chic_high, aes(x = temp, y = o3)) +
  geom_point(color = "darkblue") +
  labs(x = "Temperature higher than 25°F",
       y = "Ozone higher than 20 ppb") +
  expand_limits(x = 0, y = 0)
```
